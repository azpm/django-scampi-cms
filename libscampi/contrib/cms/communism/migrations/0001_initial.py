# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-08-18 11:55
from __future__ import unicode_literals

import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import libscampi.contrib.cms.communism.utils
import libscampi.contrib.cms.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Display Name')),
                ('description', models.TextField(blank=True, null=True)),
                ('namespace', models.CharField(blank=True, max_length=25, null=True, verbose_name='URL Namespace')),
                ('app_name', models.CharField(max_length=50, verbose_name='Django Application Name')),
                ('default_view', models.CharField(max_length=50, verbose_name='Django View Function')),
            ],
            options={
                'verbose_name': 'CMS Offload',
                'verbose_name_plural': 'CMS Offloads',
            },
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Display Name')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'CMS Page',
                'verbose_name_plural': 'CMS Pages',
            },
        ),
        migrations.CreateModel(
            name='Javascript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('precedence', models.PositiveSmallIntegerField(verbose_name='Attempt to order')),
                ('active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('base', models.BooleanField(default=False, verbose_name='Always Loaded')),
                ('file', models.FileField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(), upload_to=libscampi.contrib.cms.communism.utils.theme_script_decorator)),
                ('external', models.URLField(blank=True, null=True, verbose_name='External URL')),
            ],
            options={
                'verbose_name': 'Theme Javacript',
                'verbose_name_plural': 'Theme Javascripts',
            },
        ),
        migrations.CreateModel(
            name='NamedBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gridx', models.PositiveSmallIntegerField(choices=[(1, b'Column #1'), (2, b'Column #2'), (3, b'Column #3')], verbose_name='Column')),
                ('gridy', models.PositiveSmallIntegerField(help_text='1-Ordered', verbose_name='Sub Slice')),
                ('display_order', models.PositiveSmallIntegerField(help_text='1-Ordered', verbose_name='Display Order')),
                ('name', models.CharField(max_length=100, verbose_name='Reference Name')),
                ('display_name', models.CharField(blank=True, max_length=50, verbose_name='Optional Box Title')),
                ('keyname', models.SlugField(max_length=20, verbose_name='Template/HTML Identifier')),
                ('active', models.BooleanField(db_index=True, default=True)),
            ],
            options={
                'ordering': ['slice', 'gridy', 'gridx', 'display_order'],
                'verbose_name': 'Named Box',
                'verbose_name_plural': 'Named Boxes',
            },
        ),
        migrations.CreateModel(
            name='NamedBoxTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='Reference Name')),
                ('description', models.TextField(blank=True)),
                ('content', models.TextField(verbose_name='django template')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'NamedBox Template',
                'verbose_name_plural': 'NamedBox Templates',
            },
        ),
        migrations.CreateModel(
            name='Realm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Reference Name')),
                ('keyname', models.SlugField(max_length=20, unique=True, verbose_name='URI/Template Identifier')),
                ('description', models.TextField(blank=True, null=True)),
                ('display_order', models.PositiveSmallIntegerField(unique=True, verbose_name='Display Order')),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('generates_navigation', models.BooleanField(db_index=True, default=True, verbose_name='Generates Navigation')),
                ('secure', models.BooleanField(db_index=True, default=False)),
                ('googleid', models.CharField(blank=True, help_text='Google Analytics ID', max_length=50, null=True)),
                ('searchable', models.BooleanField(db_index=True, default=True, help_text='Flag for search form generation')),
                ('search_collection', models.CharField(blank=True, help_text='Keyname for search collections', max_length=200, null=True)),
                ('direct_link', models.BooleanField(default=False, verbose_name='Provides a direct link to some external site outside of your Scampi install')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sites.Site')),
            ],
            options={
                'ordering': ['display_order'],
                'verbose_name': 'Realm',
                'verbose_name_plural': 'Realms',
            },
        ),
        migrations.CreateModel(
            name='RealmNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Display Name')),
                ('display', models.TextField(verbose_name='Notification Content')),
                ('display_start', models.DateTimeField(db_index=True, verbose_name='Start')),
                ('display_end', models.DateTimeField(db_index=True, verbose_name='End')),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='communism.Realm')),
            ],
            options={
                'verbose_name': 'Service Announcement',
                'verbose_name_plural': 'Service Announcements',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyname', models.SlugField(max_length=20, validators=[libscampi.contrib.cms.validators.magic_keyname], verbose_name='URI/Template Identifier')),
                ('display_order', models.PositiveSmallIntegerField(db_index=True, verbose_name='Display Order')),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('generates_navigation', models.BooleanField(db_index=True, default=True, verbose_name='Generates Navigation')),
                ('element_id', models.PositiveIntegerField(verbose_name='Primary Key of <BaseHierarchyElement>')),
                ('element_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Type of BaseHierarchyElement')),
                ('extends', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='communism.Section')),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='communism.Realm')),
            ],
            options={
                'ordering': ('realm__display_order', 'display_order'),
                'verbose_name': 'Hierarchy Element',
                'verbose_name_plural': 'Hierarchy Elements',
            },
        ),
        migrations.CreateModel(
            name='Slice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Reference Name')),
                ('display_order', models.PositiveSmallIntegerField(help_text='1-Ordered', verbose_name='Display Order')),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='communism.Commune')),
            ],
            options={
                'ordering': ('display_order',),
            },
        ),
        migrations.CreateModel(
            name='StyleSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('precedence', models.PositiveSmallIntegerField(verbose_name='Attempt to order')),
                ('active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('base', models.BooleanField(default=False, verbose_name='Always Loaded')),
                ('media', models.CharField(help_text=b'screen, print, etc', max_length=200)),
                ('for_ie', models.PositiveSmallIntegerField(blank=True, choices=[(6, b"IE 6 (Please don't use)"), (7, b'IE 7'), (8, b'IE 8'), (9, b'IE 9')], null=True, verbose_name='IE Version')),
                ('file', models.FileField(storage=django.core.files.storage.FileSystemStorage(), upload_to=libscampi.contrib.cms.communism.utils.theme_style_decorator)),
            ],
            options={
                'verbose_name': 'Theme Stylesheet',
                'verbose_name_plural': 'Theme Stylesheets',
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Reference Name')),
                ('keyname', models.SlugField(max_length=20, unique=True, verbose_name='Internal Identifier')),
                ('description', models.TextField(blank=True, null=True)),
                ('banner', models.ImageField(upload_to=libscampi.contrib.cms.communism.utils.theme_banner_decorator, verbose_name='Image Banner')),
            ],
        ),
        migrations.AddField(
            model_name='stylesheet',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='communism.Theme'),
        ),
        migrations.AddField(
            model_name='realm',
            name='theme',
            field=models.ForeignKey(help_text='Provides Fall Back theme for sections/applications', on_delete=django.db.models.deletion.CASCADE, to='communism.Theme'),
        ),
    ]
