# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-08-18 11:55
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import libscampi.contrib.cms.renaissance.models
import libscampi.contrib.cms.renaissance.validation
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('communism', '0002_auto_20200818_1155'),
    ]

    operations = [
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('credit', models.CharField(blank=True, max_length=150)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name=b'we have reproduction rights for this media')),
                ('modified', models.DateTimeField(auto_now=True)),
                ('mime_type', models.CharField(blank=True, max_length=150)),
                ('file', models.FileField(upload_to=libscampi.contrib.cms.renaissance.models._file_upload_pathing, validators=[libscampi.contrib.cms.renaissance.validation.ValidAudExtension()])),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Audio File',
                'verbose_name_plural': 'Audio Files',
            },
        ),
        migrations.CreateModel(
            name='AudioPlaylist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Audio Playlist',
                'verbose_name_plural': 'Audio Playlists',
            },
        ),
        migrations.CreateModel(
            name='AudioType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('keyname', models.SlugField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Audio Type',
                'verbose_name_plural': 'Audio Types',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('credit', models.CharField(blank=True, max_length=150)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name=b'we have reproduction rights for this media')),
                ('modified', models.DateTimeField(auto_now=True)),
                ('mime_type', models.CharField(blank=True, max_length=150)),
                ('file', models.FileField(upload_to=libscampi.contrib.cms.renaissance.models._file_upload_pathing, validators=[libscampi.contrib.cms.renaissance.validation.ValidDocExtension()])),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Document File',
                'verbose_name_plural': 'Document Files',
            },
        ),
        migrations.CreateModel(
            name='DocumentPlaylist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Document Playlist',
                'verbose_name_plural': 'Document Playlists',
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('keyname', models.SlugField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Document Type',
                'verbose_name_plural': 'Document Types',
            },
        ),
        migrations.CreateModel(
            name='External',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('credit', models.CharField(blank=True, max_length=150)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name=b'we have reproduction rights for this media')),
                ('modified', models.DateTimeField(auto_now=True)),
                ('mime_type', models.CharField(blank=True, max_length=150)),
                ('data', models.TextField()),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'External Embed',
                'verbose_name_plural': 'External Embeds',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('credit', models.CharField(blank=True, max_length=150)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name=b'we have reproduction rights for this media')),
                ('modified', models.DateTimeField(auto_now=True)),
                ('mime_type', models.CharField(blank=True, max_length=150)),
                ('file', models.ImageField(upload_to=libscampi.contrib.cms.renaissance.models._file_upload_pathing, validators=[libscampi.contrib.cms.renaissance.validation.ValidImgExtension()])),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Image File',
                'verbose_name_plural': 'Image Files',
            },
        ),
        migrations.CreateModel(
            name='ImagePlaylist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Image Playlist',
                'verbose_name_plural': 'Image Playlists',
            },
        ),
        migrations.CreateModel(
            name='ImageType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('keyname', models.SlugField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('width', models.PositiveIntegerField()),
                ('height', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'Image Type',
                'verbose_name_plural': 'Image Types',
            },
        ),
        migrations.CreateModel(
            name='MediaInlineTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=25)),
                ('description', models.TextField(blank=True, null=True)),
                ('content', models.TextField()),
                ('javascript', models.ManyToManyField(blank=True, to='communism.Javascript')),
                ('stylesheet', models.ManyToManyField(blank=True, to='communism.StyleSheet')),
            ],
            options={
                'verbose_name': 'Template (Inline)',
                'verbose_name_plural': 'Templates (Inline)',
            },
        ),
        migrations.CreateModel(
            name='MediaPlaylistTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=25)),
                ('description', models.TextField(blank=True, null=True)),
                ('content', models.TextField()),
                ('javascript', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='communism.Javascript')),
                ('stylesheet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='communism.StyleSheet')),
            ],
            options={
                'verbose_name': 'Template (Playlist)',
                'verbose_name_plural': 'Templates (Playlist)',
            },
        ),
        migrations.CreateModel(
            name='Object',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('credit', models.CharField(blank=True, max_length=150)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name=b'we have reproduction rights for this media')),
                ('modified', models.DateTimeField(auto_now=True)),
                ('mime_type', models.CharField(blank=True, max_length=150)),
                ('file', models.FileField(upload_to=libscampi.contrib.cms.renaissance.models._file_upload_pathing, validators=[libscampi.contrib.cms.renaissance.validation.ValidObjExtension()])),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'HTML Object File',
                'verbose_name_plural': 'HTML Object Files',
            },
        ),
        migrations.CreateModel(
            name='ObjectPlaylist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'HTML Object Playlist',
                'verbose_name_plural': 'HTML Object Playlists',
            },
        ),
        migrations.CreateModel(
            name='ObjectType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('keyname', models.SlugField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('width', models.PositiveIntegerField()),
                ('height', models.PositiveIntegerField()),
                ('inline_template', models.ForeignKey(db_column=b'template_id', on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaInlineTemplate', verbose_name=b'Media Inline-Template')),
            ],
            options={
                'verbose_name': 'HTML Object Type',
                'verbose_name_plural': 'HTML Object Types',
            },
        ),
        migrations.CreateModel(
            name='RankedAudio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.Audio')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.AudioPlaylist')),
            ],
            options={
                'ordering': ['rank'],
                'verbose_name': 'Ranked Audio',
                'verbose_name_plural': 'Ranked Audios',
            },
        ),
        migrations.CreateModel(
            name='RankedDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.Document')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.DocumentPlaylist')),
            ],
            options={
                'ordering': ['rank'],
                'verbose_name': 'Ranked Document',
                'verbose_name_plural': 'Ranked Documents',
            },
        ),
        migrations.CreateModel(
            name='RankedImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.Image')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.ImagePlaylist')),
            ],
            options={
                'ordering': ['rank'],
                'verbose_name': 'Ranked Image',
                'verbose_name_plural': 'Ranked Images',
            },
        ),
        migrations.CreateModel(
            name='RankedObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.Object')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.ObjectPlaylist')),
            ],
            options={
                'ordering': ['rank'],
                'verbose_name': 'Ranked Object',
                'verbose_name_plural': 'Ranked Objects',
            },
        ),
        migrations.CreateModel(
            name='RankedVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['rank'],
                'verbose_name': 'Ranked Video',
                'verbose_name_plural': 'Ranked Videos',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('credit', models.CharField(blank=True, max_length=150)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name=b'we have reproduction rights for this media')),
                ('modified', models.DateTimeField(auto_now=True)),
                ('mime_type', models.CharField(blank=True, max_length=150)),
                ('file', models.FileField(blank=True, upload_to=libscampi.contrib.cms.renaissance.models._file_upload_pathing, validators=[libscampi.contrib.cms.renaissance.validation.ValidVidExtension()])),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('thumbnail', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='renaissance.Image')),
            ],
            options={
                'verbose_name': 'Video File',
                'verbose_name_plural': 'Video Files',
            },
        ),
        migrations.CreateModel(
            name='VideoPlaylist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('caption', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('collection', models.ManyToManyField(through='renaissance.RankedVideo', to='renaissance.Video')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaPlaylistTemplate')),
            ],
            options={
                'verbose_name': 'Video Playlist',
                'verbose_name_plural': 'Video Playlists',
            },
        ),
        migrations.CreateModel(
            name='VideoType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('keyname', models.SlugField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('width', models.PositiveIntegerField()),
                ('height', models.PositiveIntegerField()),
                ('inline_template', models.ForeignKey(db_column=b'template_id', on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaInlineTemplate', verbose_name=b'Media Inline-Template')),
            ],
            options={
                'verbose_name': 'Video Type',
                'verbose_name_plural': 'Video Types',
            },
        ),
        migrations.AddField(
            model_name='video',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.VideoType'),
        ),
        migrations.AddField(
            model_name='rankedvideo',
            name='playlist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.VideoPlaylist'),
        ),
        migrations.AddField(
            model_name='rankedvideo',
            name='video',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.Video'),
        ),
        migrations.AddField(
            model_name='objectplaylist',
            name='collection',
            field=models.ManyToManyField(through='renaissance.RankedObject', to='renaissance.Object'),
        ),
        migrations.AddField(
            model_name='objectplaylist',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='objectplaylist',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaPlaylistTemplate'),
        ),
        migrations.AddField(
            model_name='object',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.ObjectType'),
        ),
        migrations.AddField(
            model_name='imagetype',
            name='inline_template',
            field=models.ForeignKey(db_column=b'template_id', on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaInlineTemplate', verbose_name=b'Media Inline-Template'),
        ),
        migrations.AddField(
            model_name='imageplaylist',
            name='collection',
            field=models.ManyToManyField(through='renaissance.RankedImage', to='renaissance.Image'),
        ),
        migrations.AddField(
            model_name='imageplaylist',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='imageplaylist',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaPlaylistTemplate'),
        ),
        migrations.AddField(
            model_name='image',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.ImageType'),
        ),
        migrations.AddField(
            model_name='documenttype',
            name='inline_template',
            field=models.ForeignKey(db_column=b'template_id', on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaInlineTemplate', verbose_name=b'Media Inline-Template'),
        ),
        migrations.AddField(
            model_name='documentplaylist',
            name='collection',
            field=models.ManyToManyField(through='renaissance.RankedDocument', to='renaissance.Document'),
        ),
        migrations.AddField(
            model_name='documentplaylist',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='documentplaylist',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaPlaylistTemplate'),
        ),
        migrations.AddField(
            model_name='document',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.DocumentType'),
        ),
        migrations.AddField(
            model_name='audiotype',
            name='inline_template',
            field=models.ForeignKey(db_column=b'template_id', on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaInlineTemplate', verbose_name=b'Media Inline-Template'),
        ),
        migrations.AddField(
            model_name='audioplaylist',
            name='collection',
            field=models.ManyToManyField(through='renaissance.RankedAudio', to='renaissance.Audio'),
        ),
        migrations.AddField(
            model_name='audioplaylist',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='audioplaylist',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.MediaPlaylistTemplate'),
        ),
        migrations.AddField(
            model_name='audio',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='renaissance.AudioType'),
        ),
    ]
